RESOURCE_OVERLAY_CONFIGURATION_SOLID
{
	MapResolution = 256			//(Integer) should be power of 2
	InterpolationLevel = 4			//(integer) 0+ - How many interpolation iterations to do
	LoOpacity = 0.25			//(float) 	0.0 to 1.0 - Opacity of overlay (lower bound)
	HiOpacity = 0.50			//(float) 	0.0 to 1.0 - Opacity of overlay (upper bound)
	GridWeight = 0.5			//(float) 	0.0 to 1.0 - How dark/light the grid is
	LoColor = 0.01				//(float) 	0.0 to 1.0 - Contrast level for monochrome
	HiColor = 1.50				//(float) 	1.0 to 2.0 - Contrast level for monochrome
	CapPixels = 32				//(int)		0+ - Number of pixels to extrapolate polar caps
	FilterMode = 2				//(Integer)	0=Point, 1=Bilinear, 2=Trilinear
}

RESOURCE_OVERLAY_CONFIGURATION_LINES
{
	MapResolution = 256			//(Integer) should be power of 2
	InterpolationLevel = 4			//(integer) 0+ - How many interpolation iterations to do
	LoOpacity = 0.50			//(float) 	0.0 to 1.0 - Opacity of overlay (lower bound)
	HiOpacity = 0.75			//(float) 	0.0 to 1.0 - Opacity of overlay (upper bound)
	GridWeight = 0.5			//(float) 	0.0 to 1.0 - How dark/light the grid is
	LoColor = 0.01				//(float) 	0.0 to 1.0 - Contrast level for monochrome
	HiColor = 1.50				//(float) 	1.0 to 2.0 - Contrast level for monochrome
	CapPixels = 32				//(int)		0+ - Number of pixels to extrapolate polar caps
	FilterMode = 2				//(Integer)	0=Point, 1=Bilinear, 2=Trilinear
}

RESOURCE_OVERLAY_CONFIGURATION_DOTS
{
	MapResolution = 256			//(Integer) should be power of 2
	InterpolationLevel = 4			//(integer) 0+ - How many interpolation iterations to do
	LoOpacity = 0.75			//(float) 	0.0 to 1.0 - Opacity of overlay (lower bound)
	HiOpacity = 1.00			//(float) 	0.0 to 1.0 - Opacity of overlay (upper bound)
	GridWeight = 0.0			//(float) 	0.0 to 1.0 - How dark/light the grid is
	LoColor = 0.01				//(float) 	0.0 to 1.0 - Contrast level for monochrome
	HiColor = 1.50				//(float) 	1.0 to 2.0 - Contrast level for monochrome
	CapPixels = 32				//(int)		0+ - Number of pixels to extrapolate polar caps
	FilterMode = 1				//(Integer)	0=Point, 1=Bilinear, 2=Trilinear
}